// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <stddef.h>

#include <string>
#include <vector>

#include "base/base_switches.h"
#include "base/command_line.h"
#include "base/files/file_path.h"
#include "base/path_service.h"
#include "base/strings/utf_string_conversions.h"
#include "base/threading/platform_thread.h"
#include "base/time/time.h"
#include "build/build_config.h"
#include "chrome/browser/ui/browser.h"
#include "chrome/browser/ui/tabs/tab_strip_model.h"
#include "chrome/common/chrome_paths.h"
#include "chrome/common/chrome_switches.h"
#include "chrome/test/base/in_process_browser_test.h"
#include "chrome/test/base/test_launcher_utils.h"
#include "chrome/test/base/ui_test_utils.h"
#include "content/public/common/content_switches.h"
#include "content/public/test/browser_test_utils.h"
#include "media/base/media_switches.h"
#include "media/base/test_data_util.h"
#include "media/media_features.h"
#include "net/test/embedded_test_server/embedded_test_server.h"
#include "url/gurl.h"

#if defined(OS_ANDROID)
#error This file needs to be updated to run on Android.
#endif

namespace chrome {

namespace {

const char kAudioWebMMimeType[] = "audio/webm";
const char kVideoWebMMimeType[] = "video/webm";
const char kAudioMP4MimeType[] = "audio/mp4";
const char kVideoMP4MimeType[] = "video/mp4";

// These are the expected titles set by checkKeySystemWithMediaMimeType()
// in test_key_system_instantiation.html. Other titles are possible, but
// they are unexpected and will be logged with the failure.
// "Unsupported keySystem" and "None of the requested configurations were
// supported." are actually error messages generated by
// navigator.requestMediaKeySystemAccess(), and will have to change if that
// code is modified.
const char kSuccessResult[] = "success";
const char kUnsupportedResult[] = "Unsupported keySystem";
const char kNoMatchResult[] =
    "None of the requested configurations were supported.";
const char kUnexpectedResult[] = "unexpected result";

#define EXPECT_SUCCESS(test) EXPECT_EQ(kSuccessResult, test)
#define EXPECT_UNKNOWN_KEYSYSTEM(test) EXPECT_EQ(kUnsupportedResult, test)
#define EXPECT_NO_MATCH(test) EXPECT_EQ(kNoMatchResult, test)

#if defined(USE_PROPRIETARY_CODECS)
#define EXPECT_PROPRIETARY EXPECT_SUCCESS
#else
#define EXPECT_PROPRIETARY EXPECT_NO_MATCH
#endif

// Expectations for External Clear Key.
#define EXPECT_ECK EXPECT_UNKNOWN_KEYSYSTEM
#define EXPECT_ECK_PROPRIETARY EXPECT_UNKNOWN_KEYSYSTEM
#define EXPECT_ECK_NO_MATCH EXPECT_UNKNOWN_KEYSYSTEM

#define EXPECT_WV_SUCCESS EXPECT_UNKNOWN_KEYSYSTEM
#define EXPECT_WV_PROPRIETARY EXPECT_UNKNOWN_KEYSYSTEM
#define EXPECT_WV_NO_MATCH EXPECT_UNKNOWN_KEYSYSTEM

};  // namespace

class EncryptedMediaSupportedTypesTest : public InProcessBrowserTest {
 protected:
  EncryptedMediaSupportedTypesTest() {
    audio_webm_codecs_.push_back("opus");
    audio_webm_codecs_.push_back("vorbis");

    video_webm_codecs_.push_back("vp8");
    video_webm_codecs_.push_back("vp8.0");
    video_webm_codecs_.push_back("vp9");
    video_webm_codecs_.push_back("vp9.0");

    audio_mp4_codecs_.push_back("mp4a.40.2");

    video_mp4_codecs_.push_back("avc1.42001E");  // Baseline profile.
    video_mp4_codecs_.push_back("avc1.4D000C");  // Main profile.
    video_mp4_codecs_.push_back("avc3.64001F");  // High profile.

    video_mp4_codecs_.push_back("vp09.00.01.08.02.01.01.00");

    video_mp4_hi10p_codecs_.push_back("avc1.6E001E");  // Hi10P profile

#if BUILDFLAG(ENABLE_HEVC_DEMUXING)
    video_mp4_codecs_.push_back("hvc1.1.6.L93.B0");
    video_mp4_codecs_.push_back("hev1.1.6.L93.B0");
#else
    invalid_codecs_.push_back("hvc1.1.6.L93.B0");
    invalid_codecs_.push_back("hev1.1.6.L93.B0");
#endif

    // Extended codecs are used, so make sure generic ones fail. These will be
    // tested against all initDataTypes as they should always fail to be
    // supported.
    invalid_codecs_.push_back("avc1");
    invalid_codecs_.push_back("avc1.");
    invalid_codecs_.push_back("avc3");

    // Other invalid codecs.
    invalid_codecs_.push_back("vp8.1");
    invalid_codecs_.push_back("mp4a");
    invalid_codecs_.push_back("avc2");
    invalid_codecs_.push_back("foo");

    // We only support proper long-form HEVC codec ids.
    invalid_codecs_.push_back("hev1");
    invalid_codecs_.push_back("hev1.");
    invalid_codecs_.push_back("hvc1");
    invalid_codecs_.push_back("hvc1.");
  }

  void SetUpCommandLine(base::CommandLine* command_line) override {
    InProcessBrowserTest::SetUpCommandLine(command_line);
    command_line->AppendSwitch(switches::kEnableVp9InMp4);
  }

  typedef std::vector<std::string> CodecVector;

  const CodecVector& no_codecs() const { return no_codecs_; }
  const CodecVector& audio_webm_codecs() const { return audio_webm_codecs_; }
  const CodecVector& video_webm_codecs() const { return video_webm_codecs_; }
  const CodecVector& audio_mp4_codecs() const { return audio_mp4_codecs_; }
  const CodecVector& video_mp4_codecs() const { return video_mp4_codecs_; }
  const CodecVector& video_mp4_hi10p_codecs() const {
    return video_mp4_hi10p_codecs_;
  }
  const CodecVector& invalid_codecs() const { return invalid_codecs_; }

  void SetUpOnMainThread() override {
    InProcessBrowserTest::SetUpOnMainThread();

    // Load the test page needed so that checkKeySystemWithMediaMimeType()
    // is available.
    std::unique_ptr<net::EmbeddedTestServer> http_test_server(
        new net::EmbeddedTestServer);
    http_test_server->ServeFilesFromSourceDirectory(media::GetTestDataPath());
    CHECK(http_test_server->Start());
    GURL gurl = http_test_server->GetURL("/test_key_system_instantiation.html");
    ui_test_utils::NavigateToURL(browser(), gurl);
  }

  // Create a valid JavaScript string for the content type. Format is
  // |mimeType|; codecs="|codec|", where codecs= is omitted if there
  // is no codec.
  static std::string MakeQuotedContentType(std::string mimeType,
                                           std::string codec) {
    std::string contentType(mimeType);
    if (!codec.empty()) {
      contentType.append("; codecs=\"");
      contentType.append(codec);
      contentType.append("\"");
    }
    return "'" + contentType + "'";
  }

  static std::string ExecuteCommand(content::WebContents* contents,
                                    const std::string& command) {
    content::TitleWatcher title_watcher(contents,
                                        base::ASCIIToUTF16(kSuccessResult));
    title_watcher.AlsoWaitForTitle(base::ASCIIToUTF16(kUnsupportedResult));
    title_watcher.AlsoWaitForTitle(base::ASCIIToUTF16(kNoMatchResult));
    title_watcher.AlsoWaitForTitle(base::ASCIIToUTF16(kUnexpectedResult));
    EXPECT_TRUE(content::ExecuteScript(contents, command));
    base::string16 result = title_watcher.WaitAndGetTitle();
    return base::UTF16ToASCII(result);
  }

  std::string AreCodecsSupportedByKeySystem(const std::string& mimeType,
                                            const CodecVector& codecs,
                                            const std::string& keySystem) {
    // Choose the appropriate initDataType for the subtype.
    size_t pos = mimeType.find('/');
    DCHECK(pos > 0);
    std::string subType(mimeType.substr(pos + 1));
    std::string initDataType;
    if (subType == "mp4") {
      initDataType = "cenc";
    } else {
      DCHECK(subType == "webm");
      initDataType = "webm";
    }

    bool isAudio = mimeType.compare(0, 5, "audio") == 0;
    DCHECK(isAudio || mimeType.compare(0, 5, "video") == 0);

    // Create the contentType string based on |codecs|.
    std::string contentTypeList("[");
    if (codecs.empty()) {
      contentTypeList.append(MakeQuotedContentType(mimeType, std::string()));
    } else {
      for (auto codec : codecs) {
        contentTypeList.append(MakeQuotedContentType(mimeType, codec));
        contentTypeList.append(",");
      }
      // Remove trailing comma.
      contentTypeList.erase(contentTypeList.length() - 1);
    }
    contentTypeList.append("]");

    std::string command("checkKeySystemWithMediaMimeType('");
    command.append(keySystem);
    command.append("','");
    command.append(initDataType);
    command.append("',");
    command.append(isAudio ? contentTypeList : "null");
    command.append(",");
    command.append(!isAudio ? contentTypeList : "null");
    command.append(")");

    return ExecuteCommand(browser()->tab_strip_model()->GetActiveWebContents(),
                          command);
  }

 private:
  const CodecVector no_codecs_;
  CodecVector audio_webm_codecs_;
  CodecVector video_webm_codecs_;
  CodecVector audio_mp4_codecs_;
  CodecVector video_mp4_codecs_;
  CodecVector video_mp4_hi10p_codecs_;
  CodecVector invalid_codecs_;
};

}  // namespace chrome
